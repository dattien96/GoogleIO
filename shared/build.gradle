apply plugin: 'com.android.library'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion rootProject.compileSdkVersion
    defaultConfig {
        minSdkVersion rootProject.minSdkVersion
        targetSdkVersion rootProject.targetSdkVersion
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        buildConfigField "String", "CONFERENCE_TIMEZONE", "\"${conference_timezone}\""
        buildConfigField "String", "CONFERENCE_DAY1_START", "\"${conference_day1_start}\""
        buildConfigField "String", "CONFERENCE_DAY1_END", "\"${conference_day1_end}\""
        buildConfigField "String", "CONFERENCE_DAY2_START", "\"${conference_day2_start}\""
        buildConfigField "String", "CONFERENCE_DAY2_END", "\"${conference_day2_end}\""
        buildConfigField "String", "CONFERENCE_DAY3_START", "\"${conference_day3_start}\""
        buildConfigField "String", "CONFERENCE_DAY3_END", "\"${conference_day3_end}\""

        buildConfigField "String",
                "CONFERENCE_WIFI_OFFERING_START",
                "\"${conference_wifi_offering_start}\""
    }

    buildTypes {
        release {
            minifyEnabled false
        }

        staging {
            initWith debug

            // Specifies a sorted list of fallback build types that the
            // plugin should try to use when a dependency does not include a
            // "staging" build type.
            // Used with :test-shared, which doesn't have a staging variant.
            matchingFallbacks = ['debug']
        }
    }

}

dependencies {
    implementation project(":model")
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Architecture Components
    implementation "androidx.lifecycle:lifecycle-extensions:$rootProject.lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-livedata:$rootProject.lifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-viewmodel:$rootProject.lifecycleVersion"

    // Utils
    api "com.jakewharton.timber:timber:$rootProject.timberVersion"
    implementation "com.google.code.gson:gson:$rootProject.gsonVersion"
    implementation "androidx.core:core-ktx:$rootProject.ktxVersion"

    // OkHttp
    implementation "com.squareup.okhttp3:okhttp:$rootProject.okhttpVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$rootProject.okhttpVersion"

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$rootProject.kotlinVersion"

    // Dagger
    implementation "com.google.dagger:dagger-android:$rootProject.dagger"
    implementation "com.google.dagger:dagger-android-support:$rootProject.dagger"
    kapt "com.google.dagger:dagger-compiler:$rootProject.dagger"
    kapt "com.google.dagger:dagger-android-processor:$rootProject.dagger"

    // ThreeTenBP for the shared module only. Date and time API for Java.
    testImplementation "org.threeten:threetenbp:$rootProject.threetenbpVersion"
    compileOnly "org.threeten:threetenbp:$rootProject.threetenbpVersion:no-tzdb"

    // Unit tests
    testImplementation "junit:junit:$rootProject.junitVersion"
    testImplementation "org.hamcrest:hamcrest-library:$rootProject.hamcrestVersion"
    testImplementation "org.mockito:mockito-core:$rootProject.mockitoVersion"
    testImplementation "com.nhaarman:mockito-kotlin:$rootProject.mockitoKotlinVersion"

    // unit tests livedata
    testImplementation "androidx.arch.core:core-testing:$rootProject.lifecycleVersion"
}

